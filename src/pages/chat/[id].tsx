import Head from "next/head";
import { useEffect } from "react";
import styled from "styled-components";
import Header from "@/componets/common/header/Header";
import { useRouter } from "next/router";
import Individual from "@/componets/chat/individual/Individual";
import Messages from "@/componets/chat/messages/Messages";
import { getSoulsDataForId } from "@/utils/functions";
import WrapperPage from "@/componets/common/wrappers/WrapperPage";
import { useAppDispatch, useAppSelector } from "@/hooks/reducers.hook";
import { APP_ROUTES, StorageCellEnum } from "@/constants/common";
import { userSlice } from "@/store/reducers/userSlice";
import { ILocalStorageData } from "../../../types/common.types";
import { isConstructorDeclaration } from "typescript";

const Chat: React.FC = () => {
  const router = useRouter();
  const soulId = router.query.id as string;
  const currentSoulsData = getSoulsDataForId(soulId);
  const { questionsAmount, email } = useAppSelector(
    (store) => store.userReducer
  );

  const { signin } = userSlice.actions;
  const dispatch = useAppDispatch();

  console.log(">>>questionsAmount", questionsAmount);

  useEffect(() => {
    let localData = localStorage.getItem(StorageCellEnum.USER);
    if (localData) {
      const parsedData: ILocalStorageData = JSON.parse(localData);
      dispatch(
        signin({
          id: parsedData.id,
          email: parsedData.email,
          name: parsedData.name!,
          phone: parsedData.phone!,
          nextPayment: parsedData.nextpayment as string,
          questionsAmount: parsedData.questionsamount,
          readAbout: parsedData.readabout,
          shareLink: !!parsedData.shareLink,
        })
      );
      if (questionsAmount === 0) {
        console.log("====0");
        // router.push(APP_ROUTES.Paywall);
      }
      console.log(">>>questionsAmount", questionsAmount);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WrapperPage color={"#0a0907"}>
        <StyledSectionWrapper>
          <Header isHaveShareBtn={true} />
          <StyledChatContainer>
            <div>
              <Individual individualData={currentSoulsData} />
            </div>
            <div>
              <Messages soulId={soulId} avatarImg={currentSoulsData?.image} />
            </div>
          </StyledChatContainer>
        </StyledSectionWrapper>
      </WrapperPage>
    </>
  );
};

const StyledSectionWrapper = styled.section`
  width: 100%;
  height: 100%;
  /* min-height: 100%; */
  background-color: #0a0907;
  overflow: hidden;

  @media (min-width: 1600px) {
    /* min-height: 1405px; */
  }

  @media (max-width: 1600px) {
    min-height: 100%;
  }

  @media (max-width: 1200px) {
    overflow-y: auto;
    min-height: 812px;
  }
`;

const StyledChatContainer = styled.main`
  position: relative;
  height: calc(100% - 96px);
  min-height: calc(100% - 96px);
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  background-color: #0a0907;

  & > div {
    width: 50%;
    height: calc(100vh - 80px);
    /* min-height: 95vh; */
  }

  & > div:first-child {
    overflow: visible;
  }

  @media (max-width: 1250px) {
    flex-direction: column;
    & > div {
      width: 100%;
    }
  }
`;

export default Chat;
